version: "3.9"

services:
  postgres:
    image: postgres:16.4
    environment:
      POSTGRES_USER: orchestrator
      POSTGRES_PASSWORD: orchestrator_pw
      POSTGRES_DB: orchestrator
      TZ: Europe/Chisinau
      PGTZ: Europe/Chisinau
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../migrations:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.2.5
    command: ["redis-server", "--appendonly", "yes", "--appendfsync", "everysec"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: ops/Dockerfile.api
      target: production
    environment:
      DATABASE_URL: postgresql+psycopg://orchestrator:orchestrator_pw@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379/0
      TZ: Europe/Chisinau
      PYTHONPATH: /app
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 8080
      LOG_LEVEL: info
      # Security configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-secret-key-change-in-production}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-30}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      MAX_REQUESTS_PER_MINUTE: ${MAX_REQUESTS_PER_MINUTE:-60}
      MAX_REQUESTS_PER_HOUR: ${MAX_REQUESTS_PER_HOUR:-1000}
      MAX_REQUEST_SIZE: ${MAX_REQUEST_SIZE:-10485760}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  scheduler:
    build:
      context: ..
      dockerfile: ops/Dockerfile.scheduler
      target: production
    environment:
      DATABASE_URL: postgresql+psycopg://orchestrator:orchestrator_pw@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379/0
      TZ: Europe/Chisinau
      PYTHONPATH: /app
      LOG_LEVEL: info
      SCHEDULER_MISFIRE_GRACE_TIME: 30
      SCHEDULER_MAX_WORKERS: 10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: ..
      dockerfile: ops/Dockerfile.worker
      target: production
    environment:
      DATABASE_URL: postgresql+psycopg://orchestrator:orchestrator_pw@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379/0
      TZ: Europe/Chisinau
      PYTHONPATH: /app
      LOG_LEVEL: info
      WORKER_LEASE_SECONDS: 60
      WORKER_POLL_INTERVAL: 0.5
      WORKER_MAX_RETRIES: 3
      WORKER_BACKOFF_MAX_DELAY: 60
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  default:
    name: ordinaut-network
    driver: bridge