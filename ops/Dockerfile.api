# Build stage with compilation dependencies  
FROM python:3.12-slim AS builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system build dependencies required for multi-arch builds
RUN apt-get update && apt-get install -y \
    # Essential build tools for C extensions
    build-essential \
    gcc \
    g++ \
    make \
    # PostgreSQL development headers (for psycopg, asyncpg)
    libpq-dev \
    postgresql-client \
    # Cryptography dependencies  
    libffi-dev \
    libssl-dev \
    # Python development headers
    python3-dev \
    # Additional tools
    pkg-config \
    curl \
    # Clean up to reduce layer size
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /build

# Copy requirements first for better Docker layer caching
COPY requirements.txt requirements-arm.txt /build/

# Install Python dependencies with ARM-specific handling
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    if [ "$(uname -m)" = "x86_64" ]; then \
        echo "Installing x86_64 requirements"; \
        pip install --no-cache-dir --timeout 300 -r requirements.txt; \
    else \
        echo "Installing ARM requirements with compatible packages"; \
        pip install --no-cache-dir --timeout 300 -r requirements-arm.txt; \
    fi

# Runtime stage with minimal dependencies
FROM python:3.12-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/home/appuser/.local/bin:$PATH"

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    # Runtime PostgreSQL client library
    libpq5 \
    # Runtime SSL libraries for cryptography
    libssl3 \
    libffi8 \
    # Health check dependency
    curl \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY api/ /app/api/
COPY engine/ /app/engine/
COPY ordinaut/ /app/ordinaut/
COPY observability/ /app/observability/
COPY migrations/ /app/migrations/

# Change ownership to app user
RUN chown -R appuser:appuser /app

# Development stage
FROM base AS development

# Install development dependencies
RUN pip install --no-cache-dir pytest pytest-asyncio

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Run with hot reloading for development
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8080", "--reload", "--log-level", "debug"]

# Production stage
FROM base AS production

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the FastAPI application
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8080", "--log-level", "info"]
