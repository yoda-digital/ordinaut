[tool:pytest]
# Personal Agent Orchestrator - Pytest Configuration

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Async testing
asyncio_mode = auto
asyncio_default_fixture_loop_scope = session

# Output configuration
addopts = 
    --strict-markers
    --strict-config
    --tb=short
    --disable-warnings
    --maxfail=1
    --cov=api
    --cov=engine
    --cov=scheduler
    --cov=workers
    --cov=observability
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=95
    --benchmark-only
    --benchmark-sort=mean
    --benchmark-warmup=on
    --benchmark-autosave
    --timeout=300

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests with real dependencies
    load: Load and performance testing
    chaos: Chaos engineering and fault injection tests
    slow: Tests that take more than 30 seconds
    dst: DST transition testing scenarios
    benchmark: Performance benchmarks
    smoke: Quick smoke tests for CI/CD
    api: API endpoint testing
    database: Database-related tests
    scheduler: Scheduler component tests
    pipeline: Pipeline execution tests
    template: Template rendering tests
    rrule: RRULE processing tests
    worker: Worker system tests
    security: Security and authorization tests

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Parallel execution
-n = auto

# Coverage configuration
[coverage:run]
source = .
omit = 
    .venv/*
    tests/*
    get-pip.py
    */__pycache__/*
    */migrations/*
    ops/*
    scripts/*
    demo_*.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml