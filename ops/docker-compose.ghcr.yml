# GitHub Container Registry - Production Images
# Use pre-built multi-architecture images from GHCR for faster startup
version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: orchestrator
      POSTGRES_USER: orchestrator
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  api:
    image: ghcr.io/yoda-digital/ordinaut-api:${ORDINAUT_VERSION:-latest}
    environment:
      DATABASE_URL: postgresql://orchestrator:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  scheduler:
    image: ghcr.io/yoda-digital/ordinaut-scheduler:${ORDINAUT_VERSION:-latest}
    environment:
      DATABASE_URL: postgresql://orchestrator:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  worker:
    image: ghcr.io/yoda-digital/ordinaut-worker:${ORDINAUT_VERSION:-latest}
    environment:
      DATABASE_URL: postgresql://orchestrator:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

volumes:
  postgres_data:
  redis_data:

# Usage Examples:
# 
# 1. Quick start with latest images:
#    docker-compose -f docker-compose.ghcr.yml up -d
#
# 2. Use specific version:
#    ORDINAUT_VERSION=v1.4.8 docker-compose -f docker-compose.ghcr.yml up -d
#
# 3. With custom environment:
#    POSTGRES_PASSWORD=secure_pass LOG_LEVEL=DEBUG \
#    docker-compose -f docker-compose.ghcr.yml up -d
#
# 4. Production deployment with monitoring:
#    docker-compose -f docker-compose.ghcr.yml -f docker-compose.observability.yml up -d
#
# Benefits of GHCR images:
# ✅ No build time required (images pre-built in CI/CD)
# ✅ Multi-architecture support (Intel, Apple Silicon, ARM)
# ✅ Security attestations and signed provenance
# ✅ Automatic updates with semantic versioning
# ✅ Layer caching for faster pulls